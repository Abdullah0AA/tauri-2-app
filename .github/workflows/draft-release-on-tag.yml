name: 'draft-release-onTags'

on:
  push:
    tags:
      - 'v*'
      - 'app-v*'
  workflow_dispatch:

# `tauri-action` can also upload app bundles to an existing GitHub release.
# This workflow uses different actions to create and publish the release.
# `tauri-action` will only build and upload the app bundles to the specified release.

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4

      - name: create GitHub release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const tagName = process.env.GITHUB_REF_NAME;
            const releaseName = `Desktop App ${tagName}`;

            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: releaseName,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache Cargo dependencies
        id: cargo-cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: cargo-${{ runner.os }}-${{ matrix.args }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-${{ matrix.args }}-
            cargo-${{ runner.os }}-
            cargo-

      - name: Debug Cargo cache status
        run: |
          echo "Cargo cache hit: ${{ steps.cargo-cache.outputs.cache-hit }}"

      - name: Check if Cargo cache was restored
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            Get-ChildItem -Path $HOME\.cargo\registry -Force || echo "Cargo cache not restored"
          else
            ls -lah ~/.cargo/registry || echo "Cargo cache not restored"
          fi

      - name: Cache Rust build artifacts
        id: rust-cache
        uses: actions/cache@v3
        with:
          path: |
            target/release/deps
            target/release/build
          key: rust-${{ runner.os }}-${{ matrix.args }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            rust-${{ runner.os }}-${{ matrix.args }}-
            rust-${{ runner.os }}-
            rust-

      - name: Debug Rust cache status
        run: |
          echo "Rust cache hit: ${{ steps.rust-cache.outputs.cache-hit }}"

      - name: Check if Rust build artifacts were restored
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            Get-ChildItem -Path target/release/deps -Force || echo "Rust build artifacts cache not restored"
          else
            ls -lah target/release/deps || echo "Rust build artifacts cache not restored"
          fi

      - name: Print Cargo.toml Version
        run: cat src-tauri/Cargo.toml | grep '^version'

      - name: Print Latest Git Tag
        run: git describe --tags || echo "No tag found"

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm install

      - name: Build App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}
      - name: Debug Rust build output
        run: ls -lah target/release/ || echo "Rust build directory is missing"

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: "${{ needs.create-release.outputs.release_id }}",
              draft: false,
              prerelease: false
            })
